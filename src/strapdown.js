/*jslint browser: true*/ /*global $, jQuery, alert*/
;(function ( $, window, document, undefined )
{
    "use strict";

    /**
     * jQuery plugin to convert commonmark to HTML. Three use cases
     *
     * NO support for  chaining. Use callbacks
     *
     * 1) write your commonmark inside xmp or textarea tags and call e.g. $("xmp").strapdown()
     * 2) use page(configurable) attribute in xmp or textarea to refer commonmark source file URLs. Call e.g. $("xmp").strapdown()
     * 3) pass "useSearchString" as a first argument and strapdown will use URL's search string to locate ONE commonmark document
     *   which is inserted into first calling element.
     *
     *
     *  Usage:
     *          <jQuery elements>.strapdown(options)
     *      or  <jQuery elements>.strapdown(function, options)
     *
     *  Configuration:
     *          TBD
     */

    function defaultMethod(options, elems) {
        var deferreds = [];
        var opts = $.extend( {}, $.fn.strapdown.defaultsOptions, options );

        elems.each(function() {
            var elem = $( this );
            var x = processElement(elem, opts);
            if (x){
                deferreds.push(x);
            }
        });

        console.debug(deferreds);
        $.when.apply($,deferreds)
            .then(function() {
                console.debug("Running allDone callback");
                if (opts.allDone) {
                    opts.allDone();
                }
            });
    };

    // TODO: make more flexible. Now mostly hardcoded
    function useSearchString(options, elems) {
        var first;
        var opts = $.extend( {}, $.fn.strapdown.defaultsOptions, options );
        var url = "";
        if (opts.async === false) {
            $.ajaxSetup({async: false});
        }
        var name = $.getQueryParam(opts.searchStringKey);

        if (!name) {
            console.error("No " + opts.searchStringKey + " found in URL search string");
            return;
        } else {
            url = name + ".md";
        }

        if (elems.length > 1) {
            console.warn("Too many elements selected. using only first one");
            first = elems.first();
        } else {
            first = elems;
        }

        var x = $.get(url, function( data ) {
            updateElement(first, data, opts);
        });

        $.when(x)
            .then(function() {
                console.debug("running allDone callback");
                if (opts.allDone) {
                    opts.allDone();
                }
            });
    };

    /**
     * Helper for defaultMethod()
     */
    function processElement(elem, opts) {
        var page = elem.attr(opts.attributeForURL);
        if (! page ) {
            updateElement(elem, elem.text(), opts);
        } else if (page.length > 0) {
            return $.get(page, function( data ) {
                updateElement(elem, data, opts);
            });
        }
    };

    /**
     * Function to convert commonmark to HTML and
     * replace source element  with new element
     *
     * @param elem element to replace
     * @param sourceText commonmark source text
     * @param opts options
     */
    function updateElement(elem, sourceText, opts) {
        var newElem = $( "<div></div>").addClass(opts.generatedClass);
        if (opts.engine === "remarkable") {
            var md = new Remarkable('commonmark');
            newElem.html(md.render(sourceText));
        } else {
            newElem.html(marked(sourceText));
        }

        //TODO: copy more attributes
        //TODO: check if possible to use replaceWith
        var saved_id = elem.attr("id");
        elem.after(newElem);
        elem.remove();
        newElem.attr("id", saved_id);

        //finally run callback for this element
        console.log("Running elemDone callbck");
        if (opts.elemDone) {
            opts.elemDone(newElem);
        }
    };

    $.fn.strapdown = function(optionsOrMethod, options) {
        if (optionsOrMethod === "useSearchString") {
            useSearchString(options, this);
        } else {
            defaultMethod(optionsOrMethod, this);
        }
    };

    /*
     * default options.
     * TODO: add options for parsers
     */
    $.fn.strapdown.defaultsOptions = {
        searchStringKey: "page",
        engine: "remarkable",
        generatedClass: "strapdown_autogenerated",
        attributeForURL: "page",
        elemDone: null,
        allDone: null,
        debug: true
    };

})( jQuery, window, document );